---

# Main collection of env. vars to set for all tasks and scripts.
env:
    ####
    #### Global variables used for all tasks
    ####
    # Name of the ultimate destination branch for this CI run, PR or post-merge.
    DEST_BRANCH: "master"
    # Overrides default location (/tmp/cirrus) for repo clone
    GOPATH: "/var/tmp/go"
    GOBIN: "${GOPATH}/bin"
    GOSRC: "/var/tmp/go/src/github.com/containers/libpod"
    CIRRUS_WORKING_DIR: "/var/tmp/go/src/github.com/containers/libpod"
    # The default is 'sh' if unspecified
    CIRRUS_SHELL: "/bin/bash"
    # Save a little typing (path relative to $CIRRUS_WORKING_DIR)
    SCRIPT_BASE: "./contrib/cirrus"
    # Command to prefix output lines with timing information
    # (can't do inline awk script, Cirrus-CI or YAML mangles quoting)
    TIMESTAMP: "awk --file ${CIRRUS_WORKING_DIR}/${SCRIPT_BASE}/timestamp.awk"

    # HTMLify ginkgo and bats logs
    LOGFORMAT: "${CIRRUS_WORKING_DIR}/${SCRIPT_BASE}/logformatter"

    ####
    #### Cache-image names to test with (double-quotes around names are critical)
    ###
    FEDORA_NAME: "fedora-31"
    PRIOR_FEDORA_NAME: "fedora-30"
    UBUNTU_NAME: "ubuntu-19"
    PRIOR_UBUNTU_NAME: "ubuntu-18"

    _BUILT_IMAGE_SUFFIX: "libpod-6465271544152064"
    FEDORA_CACHE_IMAGE_NAME: "${FEDORA_NAME}-${_BUILT_IMAGE_SUFFIX}"
    PRIOR_FEDORA_CACHE_IMAGE_NAME: "${PRIOR_FEDORA_NAME}-${_BUILT_IMAGE_SUFFIX}"
    UBUNTU_CACHE_IMAGE_NAME: "${UBUNTU_NAME}-${_BUILT_IMAGE_SUFFIX}"
    PRIOR_UBUNTU_CACHE_IMAGE_NAME: "${PRIOR_UBUNTU_NAME}-${_BUILT_IMAGE_SUFFIX}"

    ####
    #### Variables for composing new cache-images (used in PR testing) from
    #### base-images (pre-existing in GCE)
    ####
    BUILT_IMAGE_SUFFIX: "-${CIRRUS_REPO_NAME}-${CIRRUS_BUILD_ID}"
    # Special image w/ nested-libvirt + tools for creating new cache and base images
    IMAGE_BUILDER_CACHE_IMAGE_NAME: "image-builder-image-1541772081"
    GATE_IMAGE_FQIN: "quay.io/libpod/gate:${DEST_BRANCH}"

    ####
    #### Default to NOT operating in any special-case testing mode
    ####
    SPECIALMODE: "none"  # don't do anything special
    TEST_REMOTE_CLIENT: 'false'  # don't test remote client by default
    ADD_SECOND_PARTITION: 'false'  # will certainly fail inside containers
    MOD_LIBPOD_CONF: 'true'  # Update libpod.conf runtime if required by OS environment


container:
    image: "${GATE_IMAGE_FQIN}"
    cpu: 1
    memory: 1


# Every *_task runs in parallel in separate VMsd. The name prefix only for reference
# in WebUI, and will be followed by matrix details.  This task gates all others with
# quick format, lint, and unit tests on the standard platform.
gating_task:

    # Only run this on PRs, never during post-merge testing (for speed).
    only_if: $CIRRUS_BRANCH != $DEST_BRANCH

    # NoOp
    script: /bin/true


# This task checks to make sure that we can still build an rpm from the
# source code using contrib/rpm/podman.spec.in
rpmbuild_task:

    only_if: >-
        $CIRRUS_CHANGE_MESSAGE !=~ '.*CI:IMG.*' &&
        $CIRRUS_CHANGE_MESSAGE !=~ '.*CI:DOCS.*' &&
        $CIRRUS_BRANCH != $DEST_BRANCH

    depends_on:
        - "gating"

    # NoOp
    script: /bin/true


# This task runs `make vendor` followed by ./hack/tree_status.sh to check
# whether the git tree is clean.  The reasoning for that is to make sure
# that the vendor.conf, the code and the vendored packages in ./vendor are
# in sync at all times.
vendor_task:

    only_if: >-
        $CIRRUS_CHANGE_MESSAGE !=~ '.*CI:IMG.*' &&
        $CIRRUS_CHANGE_MESSAGE !=~ '.*CI:DOCS.*'

    depends_on:
        - "gating"

    # NoOp
    script: /bin/true


# This task runs `make varlink_api_generate` followed by ./hack/tree_status.sh to check
# whether the git tree is clean.
varlink_api_task:

    only_if: >-
        $CIRRUS_CHANGE_MESSAGE !=~ '.*CI:IMG.*' &&
        $CIRRUS_CHANGE_MESSAGE !=~ '.*CI:DOCS.*'

    depends_on:
        - "gating"

    # NoOp
    script: /bin/true


build_each_commit_task:

    depends_on:
        - "gating"
        - "vendor"
        - "varlink_api"

    only_if: >-
        $CIRRUS_BRANCH != $DEST_BRANCH &&
        $CIRRUS_CHANGE_MESSAGE !=~ '.*CI:IMG.*' &&
        $CIRRUS_CHANGE_MESSAGE !=~ '.*CI:DOCS.*'

    # NoOp
    script: /bin/true


build_without_cgo_task:

    depends_on:
        - "gating"
        - "vendor"
        - "varlink_api"

    only_if: >-
        $CIRRUS_BRANCH != $DEST_BRANCH &&
        $CIRRUS_CHANGE_MESSAGE !=~ '.*CI:IMG.*' &&
        $CIRRUS_CHANGE_MESSAGE !=~ '.*CI:DOCS.*'

    # NoOp
    script: /bin/true


# Update metadata on VM images referenced by this repository state
meta_task:

    depends_on:
        - "gating"
        - "vendor"
        - "varlink_api"
        - "build_each_commit"
        - "build_without_cgo"

    # NoOp
    script: /bin/true


# Remove old and disused images based on labels set by meta_task
image_prune_task:

    # This should ONLY ever run from the master branch, and never
    # anywhere else so it's behavior is always consistent, even
    # as new branches are created.
    only_if: $CIRRUS_BRANCH == "master"

    depends_on:
        - "meta"

    # NoOp
    script: /bin/true


# This task does the unit and integration testing for every platform
testing_task:
    alias: "testing"
    depends_on:
        - "gating"
        - "vendor"
        - "varlink_api"
        - "build_each_commit"
        - "build_without_cgo"

    # Only test build cache-images, if that's what's requested
    only_if: >-
        $CIRRUS_CHANGE_MESSAGE !=~ '.*CI:IMG.*' &&
        $CIRRUS_CHANGE_MESSAGE !=~ '.*CI:DOCS.*'

    # NoOp
    script: /bin/true

    # When examining a particular run, provide convenient access to release files.
    tar_artifacts:
        path: "*.tar.gz"
        type: "application/x-tar"

    html_artifacts:
        path: "*.log.html"
        type: "text/html"


# This task executes tests under unique environments/conditions
special_testing_rootless_task:

    depends_on:
        - "gating"
        - "varlink_api"
        - "vendor"
        - "build_each_commit"
        - "build_without_cgo"

    only_if: >-
        $CIRRUS_CHANGE_MESSAGE !=~ '.*CI:IMG.*' &&
        $CIRRUS_CHANGE_MESSAGE !=~ '.*CI:DOCS.*'

    # NoOp
    script: /bin/true


special_testing_in_podman_task:
    alias: "special_testing_in_podman"
    depends_on:
        - "gating"
        - "varlink_api"
        - "vendor"
        - "build_each_commit"
        - "build_without_cgo"

    only_if: >-
        $CIRRUS_CHANGE_MESSAGE !=~ '.*CI:IMG.*' &&
        $CIRRUS_CHANGE_MESSAGE !=~ '.*CI:DOCS.*'

    # NoOp
    script: /bin/true


# TODO: Replace this with tasks that use actual Windows & MacOS systems
# ref: https://cirrus-ci.org/guide/macOS/
#      https://cirrus-ci.org/guide/windows/
special_testing_cross_task:
    alias: "special_testing_cross"
    depends_on:
        - "gating"
        - "varlink_api"
        - "vendor"

    only_if: >-
        $CIRRUS_CHANGE_MESSAGE !=~ '.*CI:IMG.*' &&
        $CIRRUS_CHANGE_MESSAGE !=~ '.*CI:DOCS.*'

    # NoOp
    script: /bin/true

    # When examining a particular run, provide convenient access to release files.
    zip_artifacts:
        path: "*.zip"
        type: "application/zip"

    msi_artifacts:
        path: "*.msi"
        type: "application/octet-stream"


special_testing_bindings_task:

    depends_on:
        - "gating"
        - "varlink_api"
        - "vendor"

    only_if: >-
        $CIRRUS_CHANGE_MESSAGE !=~ '.*CI:IMG.*' &&
        $CIRRUS_CHANGE_MESSAGE !=~ '.*CI:DOCS.*'

    # NoOp
    script: /bin/true


special_testing_endpoint_task:

    depends_on:
        - "gating"
        - "varlink_api"
        - "vendor"

    only_if: >-
        $CIRRUS_CHANGE_MESSAGE !=~ '.*CI:IMG.*' &&
        $CIRRUS_CHANGE_MESSAGE !=~ '.*CI:DOCS.*'

    # NoOp
    script: /bin/true


# Test building of new cache-images for future PR testing, in this PR.
test_build_cache_images_task:

    only_if: >-
        $CIRRUS_BRANCH != $DEST_BRANCH &&
        $CIRRUS_CHANGE_MESSAGE =~ '.*CI:IMG.*' &&
        $CIRRUS_CHANGE_MESSAGE !=~ '.*CI:DOCS.*'

    depends_on:
        - "gating"

    # VMs created by packer are not cleaned up by cirrus, must allow task to complete
    auto_cancellation: $CI != "true"

    # NoOp
    script: /bin/true

    on_failure:
        failed_df_script: '${DFCMD}'
        failed_journalctl_b_script: 'journalctl -b || echo "Uh oh, journalctl -b failed"'


# Test building of new cache-images for future PR testing, in this PR.
verify_test_built_images_task:

    only_if: >-
        $CIRRUS_BRANCH != $DEST_BRANCH &&
        $CIRRUS_CHANGE_MESSAGE =~ '.*CI:IMG.*' &&
        $CIRRUS_CHANGE_MESSAGE !=~ '.*CI:DOCS.*'


    depends_on:
        - "gating"
        - "test_build_cache_images"

    # NoOp
    script: /bin/true


docs_task:

    # Don't run this when building/testing new VM images
    only_if: $CIRRUS_CHANGE_MESSAGE !=~ '.*CI:IMG.*'

    depends_on:
        - "gating"

    # NoOp
    script: /bin/true

    yaml_artifacts:
        path: "pkg/api/swagger.yaml"
        type: "application/x-yaml"


# Conclusive task representing the combination of status from all required tasks.
success_task:

    # ignores any dependent conditionals, but remains sensitive to any failures
    depends_on:
        - "gating"
        - "vendor"
        - "varlink_api"
        - "build_each_commit"
        - "build_without_cgo"
        - "meta"
        - "image_prune"
        - "testing"
        - "rpmbuild"
        - "special_testing_rootless"
        - "special_testing_in_podman"
        - "special_testing_cross"
        - "special_testing_endpoint"
        - "special_testing_bindings"
        - "test_build_cache_images"
        - "verify_test_built_images"
        - "docs"

    container:
        # Note: Image has dual purpose, see contrib/gate/README.md
        image: "${GATE_IMAGE_FQIN}"
        cpu: 1
        memory: 1

    # No repository code is required for no-op script
    clone_script: mkdir -p ${CIRRUS_WORKING_DIR}

    noop_script: /bin/true


# Magic task executed manually or automatically by a Github Action workflow
retrospective_task:
    # Note: ***DO NOT*** manually trigger this task under normal operations.
    #       Manual triggering is intended for human-use only as a backup.
    #       Automatic triggering may take 1-3 minutes to occur when operating
    #       normally.
    trigger_type: manual

    # No repository code is required for no-op script
    clone_script: mkdir -p ${CIRRUS_WORKING_DIR}

    # Just a stub for now
    noop_script: /bin/true
